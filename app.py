from src.data_loader.loader import DataLoader
from src.object_detection.detector import Detector
from src.bev.position_estimator import PositionEstimator
from src.object_tracking.tracker import Tracker
from src.visualizer.visualizer import InputVisualizer, DetectionVisualizer, BevVisualizer, TrackVisualizer

def convert_mask(mask):
    mask_r = mask[:,:,2]
    mask[:,:,0] = (mask_r == 10) * 255
    mask[:,:,1] = (mask_r == 10) * 255
    mask[:,:,2] = (mask_r == 10) * 255
    return mask

# --------
# TODO convert_mask in data gernation app
# TODO Refactor
# TODO Draw Camera FOV in BEV Map
# --------

def main():
    """
        Iterate over Timesteps, data generated by DataLoader, then:
        For each camera:
            - Object Detection
            - BEV Transformation 
            - Object Tracking
    """
    # Initialize Visualizer
    input_visualizer = InputVisualizer(
        path_to_ref_img='data/input/reference_image.png', 
        output_dir='data/visualizations/data_loader'
    )
    detection_visualizer = DetectionVisualizer(
        path_to_ref_img='data/input/reference_image.png',
        output_dir='data/visualizations/object_detection'
    )
    bev_visualizer = BevVisualizer(
        path_to_ref_img='data/input/reference_image.png',
        output_dir='data/visualizations/bev'
    )
    track_visualizer = TrackVisualizer(
        path_to_ref_img='data/input/reference_image.png',
        output_dir='data/visualizations/object_tracking',
        live=True
    )
    # Initialize Data Loader
    loader = DataLoader(
        input_dir='data/input',
        skip=50
    )
    # Initialize each Module
    detector = Detector()
    position_estimator = PositionEstimator()
    # Load data (lazy)
    data = loader.load_data()

    camera_names = loader.get_camera_names()
    trackers = dict()
    for camera in camera_names:
        trackers[camera] = Tracker()



    # iterate over data for each timestep
    for ts, camera_names, frames, masks, Hs, gt in data:
        for mask in masks: 
            mask = convert_mask(mask)

        # Iterate over each camera
        for frame, mask, camera_name, H in zip(frames, masks, camera_names, Hs):
            input_visualizer.visualize_message(frame, mask, gt, ts, camera_name)
            # Detection
            detector_message = detector.detect(frame, mask, 0.7, ts, camera_name)
            detection_visualizer.visualize_message(frame, detector_message, ts, camera_name, mask)
            # BEV
            bev_message = position_estimator.estimate(detector_message, H, 81/5, ts, camera_name, gt)
            bev_visualizer.visualize_message(frame, bev_message, ts, camera_name, gt, detector_message) 
            # Tracking
            tracks = trackers[camera_name].track(bev_message)
            track_visualizer.visualize_message(tracks, ts, camera_name, bev_message, gt, frame, detector_message)

        print(f'ts: {ts}')


if __name__=='__main__':
    main()